import datetime
import requests
import joblib
import numpy as np

# Load pre-trained RandomForest model for high-risk detection
rf_model = joblib.load("determine_high_risk.pkl")

# Load MultiLabelBinarizer for symptom processing
mlb_symptoms = joblib.load("mlb_symptoms.pkl")

# Cal.com API Configuration
CAL_COM_API_KEY = "cal_live_fbeda39419c3f871eab1210f8916e84f"
CAL_COM_EVENT_TYPE_ID = "1713360" 
CAL_COM_USER = "chhavi-chadha-dcppzs"   


def schedule_meeting(summary="High-Risk Consultation", description="Urgent patient case detected"):
   
    
    cal_url = f"https://api.cal.com/v1/bookings"
    headers = {
        "Authorization": f"Bearer {CAL_COM_API_KEY}",
        "Content-Type": "application/json",
    }

    start_time = (datetime.datetime.utcnow() + datetime.timedelta(minutes=15)).isoformat() + "Z"
    end_time = (datetime.datetime.utcnow() + datetime.timedelta(minutes=45)).isoformat() + "Z"

    event_data = {
        "eventTypeId": CAL_COM_EVENT_TYPE_ID,
        "title": summary,
        "description": description,
        "start": start_time,
        "end": end_time,
        "attendees": [{"email": "chhavichadha07@gmail.com"}], 
    }

    response = requests.post(cal_url, json=event_data, headers=headers)
    
    if response.status_code == 201:
        return "✅ High-Risk Consultation Scheduled!"
    else:
        return f"⚠️ Failed to schedule meeting: {response.json()}"


def check_high_risk(symptoms):
    
    # Transform symptoms into model input format
    symptoms_vector = mlb_symptoms.transform([symptoms])
    
    # Predict risk level
    risk_prediction = rf_model.predict(symptoms_vector)

    if risk_prediction[0] == 1:  # Assuming 1 = High-Risk
        return schedule_meeting()

    return "✅ Patient is not at high risk."


# Example usage
symptoms_input = ["cold","cough", "fatigue", "fever"]
result = check_high_risk(symptoms_input)
print(result)
